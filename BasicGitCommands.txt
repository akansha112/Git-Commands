Hi Everyone...
Here are some Git commands everyone should know while working with Git.

Done with installing of git,
We have to open git bash and this is the terminal where we will write all our commands.
 
For the first time when ope the git bash terminal,
we have to set our configurations.

global config --global user.name "your_username_here"
global config --global user.email "your_email_here"

**To check our configuation**
git config --global --edit

--To make the directory
mkdir "your_directory_name"

--To check the present working directory
pwd

--To list down all the files in the directory
ls

--To go in the directory
cd "your_directory_name"

--To make your directory a git directory
git init

--To check hidden folders
ls -a

--To make a file in a directory
touch "your_file_name"
eg- touch sample.txt

--To write inside the file
vi "your_file_name"

--To display the data inside the file
cat "your_file_name"

--To delete the file
rm -rf "your_file_name"

          ******************************************************************** 
Git has something called the "staging area" or "index". This is an intermediate area where commits can be formatted and reviewed before completing the commit.

One thing that sets Git apart from other tools is that it's possible to quickly stage some of your files and commit them without committing all of the other modified files in your working directory or having to list them on the command line during the commit.

This allows you to stage only portions of a modified file. Gone are the days of making two logically unrelated modifications to a file before you realized that you forgot to commit one of them. Now you can just stage the change you need for the current commit and stage the other change for the next commit. This feature scales up to as many different changes to your file as needed.

Of course, Git also makes it easy to ignore this feature if you don't want that kind of control â€” just add a '-a' to your commit command in order to add all changes to all files to the staging area.
            ***************************************************************
--To show the status of the directory ie tracked or untracked files
git status

--To set the single file in the staging area
git add "your_file_name"

--To set all the files in the staging area
git add .

--To commit the files in the staging area
git commit -m "your_message_here"

--To check the number of commits we made
git log 

--To get back our file from staged area to unstage area
git restore --staged "your_file_name"


      ********************************************************
 Every commit provides its own hashcode. So, If you want to go to the previous commit and checkout the data of it that what you have done then we use a checkout command that is provided below..
     ***********************************************************
--To check the previous commit state
git checkout "commit_hash_code"

--To go to your initial state
git checkout master


























